# LAUNCH TOWER IN AMAZON EC2 (Public Tower Image)
# ------------------------------------------------
# EC2 Region  Location      AMI TYPE  AMI ID    
# us-east-1   N. Virginia   PV        ami-a86614bf
# us-west-1   N. California PV        ami-cdd79aad
# us-west-2   Oregon        PV        ami-028f5e62

#----------------------------------------------
# Variables
#----------------------------------------------
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "security_group" {default = "ose-sg"}
variable "keypair" {default = "id_rsa"}
variable "master_instance_type" {default = "c3.large"}
variable "node_instance_type" {default = "c3.large"}
variable "aws_region" {default = "us-east-1"}
variable "ebs_root_block_size" {default = "100"}
variable "aws_ami" {default = "ami-a86614bf"} # RHEL 7.1=ami-12663b7a, RHEL 7.2=ami-2051294a
variable "num_nodes" { default = "1" }
#----------------------------------------------
# API Keys
#----------------------------------------------
provider "aws" {
    access_key = "${var.aws_access_key}"
    secret_key = "${var.aws_secret_key}"
    region     = "${var.aws_region}"
}
#----------------------------------------------
# VPC
#----------------------------------------------
# Main VPC that will contain everything.
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
 
  tags { 
    Name = "ansible-tower-vpc" 
  }
}

# The public subnet is where resources connected to the internet will go
resource "aws_subnet" "public" {
    vpc_id                  = "${aws_vpc.main.id}"
    cidr_block              = "10.0.2.0/24"
    map_public_ip_on_launch = true
    tags { Name = "ansible-tower-public-subnet" }
}

# Internet accessible route table + gateway for the public subnet
resource "aws_internet_gateway" "public" {
  vpc_id = "${aws_vpc.main.id}"
}

resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.main.id}"
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.public.id}"
  }
  tags { Name = "ansible-tower-public-rt" }
}

resource "aws_route_table_association" "public" {
  subnet_id      = "${aws_subnet.public.id}"
  route_table_id = "${aws_route_table.public.id}"
}

#----------------------------------------------
# Security Group
#----------------------------------------------
resource "aws_security_group" "ansible-tower-sg" {
  name   = "ose-sg"
  vpc_id = "${aws_vpc.main.id}"

  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 22
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }
}


#----------------------------------------------
# DNS
#----------------------------------------------
resource "aws_route53_record" "ansible-tower" {
  zone_id = "{{ zone_id }}"
  name = "ansible.tower.{{ domain_name }}"
  type = "A"
  ttl = "300"
  records = ["${aws_instance.ansible-tower.public_ip}"]
}

resource "aws_route53_record" "nodes" {
  # same number of records as instances
  count = "${var.num_nodes}"
  zone_id = "{{ zone_id }}"                       
  name = "node.${count.index}.{{ domain_name }}"
  type = "A"
  ttl = "300"
  # matches up record N to instance N
  records = ["${element(aws_instance.node.*.public_ip, count.index)}"]
}



#----------------------------------------------
# AMI
#----------------------------------------------
resource "aws_instance" "ansible-tower" {
    ami               = "${var.aws_ami}"
    instance_type     = "${var.master_instance_type}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.ose-sg.id}" ] 
	
    root_block_device = {
		volume_type   = "gp2"
		volume_size   = "${var.ebs_root_block_size}"
	}
    connection {
        user = "ec2-user"
        key_file = "id_rsa"
    }
    provisioner "file" {
        source = "id_rsa"
        #key in pwd
        destination = "~/.ssh/id_rsa"
    }
    provisioner "remote-exec" {
      inline = [
        "sudo chmod 400 ~/.ssh/id_rsa",
        "sudo echo -e 'preserve_hostname: true' | sudo tee --append /etc/cloud/cloud.cfg > /dev/null",
        "sudo echo -e 'master.ose.{{ domain_name }}' | sudo tee /etc/hostname > /dev/null",
        "sudo echo -e 'HOSTNAME=master.ose.{{ domain_name }}' | sudo tee --append  /etc/sysconfig/network > /dev/null",
        "sudo echo -e '${aws_instance.ose-master.public_ip} master.ose.{{ domain_name }}' | sudo tee --append /etc/hosts > /dev/null",
        "sudo sed 's/127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4/127.0.0.1 master.ose.{{ domain_name }} localhost.localdomain localhost4 localhost4.localdomain4/w output' /etc/hosts"
        ]
    } 

    tags {
        Name    = "master"
        sshUser = "ec2-user"
        role    = "masters"
    }
}

resource "aws_instance" "node" {
    count             = "${var.num_nodes}"
    ami               = "${var.aws_ami}"
    instance_type     = "${var.node_instance_type}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.ansible-tower-sg.id}" ]

	root_block_device = {
		volume_type   = "gp2"
		volume_size   = "${var.ebs_root_block_size}"
	}
    connection {
        user = "ec2-user"
        key_file = "id_rsa"
    }
    provisioner "file" {
        source = "id_rsa"
        #key in pwd
        destination = "~/.ssh/id_rsa"
    }
    provisioner "remote-exec" {
      inline = [
        "sudo chmod 400 ~/.ssh/id_rsa",
        "sudo echo -e 'preserve_hostname: true' | sudo tee --append /etc/cloud/cloud.cfg > /dev/null",
        "sudo echo -e 'node.${count.index}.ose.{{ domain_name }}' | sudo tee /etc/hostname > /dev/null",        
        "sudo echo -e 'HOSTNAME=node.${count.index}.ose.{{ domain_name }}' | sudo tee --append  /etc/sysconfig/network > /dev/null",
        "sudo echo -e '${aws_instance.ose-master.public_ip} master.ose.{{ domain_name }}' | sudo tee --append /etc/hosts > /dev/null",
        "sudo echo -e '${self.public_ip} node.${count.index}.ose.{{ domain_name }}' | sudo tee --append /etc/hosts > /dev/null",
        "sudo sed 's/127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4/127.0.0.1 node.${count.index}.ose.{{ domain_name }} localhost.localdomain localhost4 localhost4.localdomain4/w output' /etc/hosts"
        ]
    }

    tags {
        Name    = "${concat("node", count.index)}"
        sshUser = "ec2-user"
        role    = "nodes"
    }
}
#----------------------------------------------
# EIP Association
#----------------------------------------------

# Create EIP
# resource "aws_eip" "ose-eip" {
#   instance = "${aws_instance.ose-master.id}"
#   vpc = true
# }

# # Associate EIP with Master
# resource "aws_eip_association" "eip_assoc" {
#   instance_id = "${aws_instance.ose-master.id}"
#   allocation_id = "${aws_eip.ose-eip.id}"
# }


#----------------------------------------------
# S3
#----------------------------------------------
# resource "aws_s3_bucket" "openshift_storage" {
#     bucket = "openshift_storage"
#     acl = "private" # Owner gets FULL_CONTROL. No one else has access rights (default).

#     tags {
#         Name = "openshift_storage"        
#     }
# }

#--------------
# Bucket Policy
#--------------

# {
#     "Version": "2012-10-17",
#     "Statement": [
#         {
#             "Effect": "Allow",
#             "Action": "s3:ListAllMyBuckets",
#             "Resource": "arn:aws:s3:::*"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "s3:ListBucket",
#                 "s3:GetBucketLocation"
#             ],
#             "Resource": "arn:aws:s3:::<INSERT YOUR BUCKET HERE>"
#         },
#         {
#             "Effect": "Allow",
#             "Action": [
#                 "s3:PutObject",
#                 "s3:GetObject",
#                 "s3:DeleteObject"
#             ],
#             "Resource": "arn:aws:s3:::<INSERT YOUR BUCKET HERE>/*"
#         }
#     ]
# }





